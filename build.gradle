import java.text.SimpleDateFormat
import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

buildscript {
  repositories {
    maven { url "https://arti.tw.ee/artifactory/libs-release" }
  }
}

plugins {
  id 'java'
  id 'groovy'
  id 'net.researchgate.release' version '2.6.0'
  id "com.bmuschko.docker-remote-api" version "3.2.1"
}

apply plugin: 'maven'

group = "com.hierynomus"
ext.artifactoryUser = "$System.env.ARTIFACTORY_USER"
ext.artifactoryPassword = "$System.env.ARTIFACTORY_PASSWORD"

repositories {
  mavenCentral()
  maven {
    url "https://dl.bintray.com/mockito/maven/"
  }
}

release {
  failOnUnversionedFiles = false
  failOnSnapshotDependencies = false
  failOnUpdateNeeded = false
  failOnCommitNeeded = false
  failOnSnapshotDependencies = false
  tagPrefix = project.name
  preTagCommitMessage = "[ci skip] pre tag commit: "
  tagCommitMessage = "[ci skip] creating tag: "
  newVersionCommitMessage = "[ci skip] new version commit: "
}
createReleaseTag.dependsOn uploadArchives

defaultTasks "build"

sourceCompatibility = 1.6
targetCompatibility = 1.6

configurations.compile.transitive = false

def bouncycastleVersion = "1.60"
def sshdVersion = "2.1.0"

dependencies {
  compile "org.slf4j:slf4j-api:1.7.7"
  compile "org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion"
  compile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
  compile "com.jcraft:jzlib:1.1.3"

  compile "net.i2p.crypto:eddsa:0.3.0"

  testCompile "junit:junit:4.11"
  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  testCompile "org.mockito:mockito-core:2.9.2"
  testCompile "org.apache.sshd:sshd-core:$sshdVersion"
  testCompile "org.apache.sshd:sshd-sftp:$sshdVersion"
  testCompile "org.apache.sshd:sshd-scp:$sshdVersion"
  testRuntime "ch.qos.logback:logback-classic:1.1.2"
  testCompile 'org.glassfish.grizzly:grizzly-http-server:2.3.17'
  testCompile 'org.apache.httpcomponents:httpclient:4.5.2'

}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

task writeSshjVersionProperties {
  doLast {
    project.file("${project.buildDir}/resources/main").mkdirs()
    project.file("${project.buildDir}/resources/main/sshj.properties").withWriter { w ->
      w.append("sshj.version=${version}")
    }
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy {
      compileClasspath += sourceSets.main.output + sourceSets.test.output
      runtimeClasspath += sourceSets.main.output + sourceSets.test.output
      srcDir file('src/itest/groovy')
    }
    resources.srcDir file('src/itest/resources')
  }
}

task integrationTest(type: Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat = 'full'
  }
  include "**/*Test.*"
  include "**/*Spec.*"
  if (!project.hasProperty("allTests")) {
    useJUnit {
      excludeCategories 'com.hierynomus.sshj.test.SlowTests'
      excludeCategories 'com.hierynomus.sshj.test.KnownFailingTests'
    }
  }

  afterSuite { descriptor, result ->
    if (descriptor.className != null) {
      def indicator = "\u001B[32m✓\u001b[0m"
      if (result.failedTestCount > 0) {
        indicator = "\u001B[31m✘\u001b[0m"
      }
      logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
    }
  }
}

project.tasks.compileGroovy.onlyIf { false }

task buildItestImage(type: DockerBuildImage) {
    inputDir = file('src/itest/docker-image')
    tag = 'sshj/sshd-itest'
}

task createItestContainer(type: DockerCreateContainer) {
    dependsOn buildItestImage
    targetImageId { buildItestImage.getImageId() }
    portBindings = ['2222:22']
}

task startItestContainer(type: DockerStartContainer) {
    dependsOn createItestContainer
    targetContainerId { createItestContainer.getContainerId() }
}

task stopItestContainer(type: DockerStopContainer) {
    targetContainerId { createItestContainer.getContainerId() }
}

project.tasks.integrationTest.dependsOn(startItestContainer)
project.tasks.integrationTest.finalizedBy(stopItestContainer)

uploadArchives {
  repositories {
    mavenDeployer {
      snapshotRepository(url: "http://arti.tw.ee/artifactory/libs-snapshot-local") {
        authentication(userName: artifactoryUser, password: artifactoryPassword)
      }
      repository(url: "http://arti.tw.ee/artifactory/libs-release-local") {
        authentication(userName: artifactoryUser, password: artifactoryPassword)
      }
    }
  }
}
